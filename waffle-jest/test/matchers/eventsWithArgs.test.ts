import {BigNumber, Contract, ContractFactory} from 'ethers';
import {MockProvider} from '@ethereum-waffle/provider';
import {EVENTS_ABI, EVENTS_BYTECODE} from '../contracts/Events';

// Note: We make use of Jest Snapshots here because the error output is
// a rich diff with ANSI colors generated by jest-diff and is therefore
// quite large.

describe('INTEGRATION: Events Emitted With Args', () => {
  const [wallet] = new MockProvider().getWallets();
  let factory: ContractFactory;
  let events: Contract;

  beforeEach(async () => {
    factory = new ContractFactory(EVENTS_ABI, EVENTS_BYTECODE, wallet);
    events = await factory.deploy();
  });

  describe('simple', () => {
    it('proper args', async () => {
      const tx = await events.emitOne();
      await expect(tx).toHaveEmittedWith(events, 'One', [
        BigNumber.from(1),
        'One',
        '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162123'
      ]);
    });

    it('not enough args', async () => {
      const tx = await events.emitOne();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'One', [BigNumber.from(1)])
      ).rejects.toThrowErrorMatchingSnapshot();
      // received additional "One" and address '0x...2123'
    });

    it('too many args', async () => {
      const tx = await events.emitOne();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'One', [1, 2, 3, 4])
      ).rejects.toThrowErrorMatchingSnapshot();
      // received BigNumber, string, and address
    });

    it('one different arg (integer)', async () => {
      const tx = await events.emitOne();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'One', [
          2,
          'One',
          '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162123'
        ])
      ).rejects.toThrowErrorMatchingSnapshot();
      // expected 2, received BigNumber(1)
    });

    it('one different arg (string number)', async () => {
      const tx = await events.emitOne();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'One', [
          BigNumber.from(1),
          'Two',
          '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162123'
        ])
      ).rejects.toThrowErrorMatchingSnapshot();
      // expected "Two", received "One"
    });

    it('one different arg (string address)', async () => {
      const tx = await events.emitOne();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'One', [
          BigNumber.from(1),
          'One',
          '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162124'
        ])
      ).rejects.toThrowErrorMatchingSnapshot();
      // expected '0x...2124', received '0x...2123'
    });
  });

  describe('arrays', () => {
    it('BigNumbers and bytes32', async () => {
      const tx = await events.emitArrays();
      await expect(tx).toHaveEmittedWith(events, 'Arrays', [
        [1, 2, 3].map((x) => BigNumber.from(x)),
        [
          '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162123',
          '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162124'
        ]
      ]);
    });

    it('bytes32 ends in different value', async () => {
      const tx = await events.emitArrays();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'Arrays', [
          [1, 2, 3].map((x) => BigNumber.from(x)),
          [
            '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162121',
            '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162124'
          ]
        ])
      ).rejects.toThrowErrorMatchingSnapshot();
      // expected '0x...2121', received '0x...2123'
    });

    it('BigNumber received is 1, not 0', async () => {
      const tx = await events.emitArrays();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'Arrays', [
          [0, 2, 3].map((x) => BigNumber.from(x)),
          [
            '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162123',
            '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162124'
          ]
        ])
      ).rejects.toThrowErrorMatchingSnapshot();
      // expected "0x00", received "0x01"
    });
  });

  describe('multiples same event', () => {
    it('with different args', async () => {
      const tx = await events.emitOneMultipleTimes();
      await expect(tx).toHaveEmittedWith(events, 'One', [
        BigNumber.from(1),
        'One',
        '0x00cfbbaf7ddb3a1476767101c12a0162e241fbad2a0162e2410cfbbaf7162123'
      ]);

      await expect(tx).toHaveEmittedWith(events, 'One', [
        BigNumber.from(1),
        'DifferentKindOfOne',
        '0x0000000000000000000000000000000000000000000000000000000000000001'
      ]);
    });

    it('with different args (not found)', async () => {
      const tx = await events.emitOneMultipleTimes();
      await expect(
        expect(tx).toHaveEmittedWith(events, 'One', [1, 2, 3, 4])
      ).rejects.toThrowErrorMatchingSnapshot();
      // received BigNumber(1), "DifferentKindOfOne", "0x...0001"
    });
  });
});
